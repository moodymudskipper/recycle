% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cycle.R, R/recycle.R, R/utils.R
\name{new_cycle}
\alias{new_cycle}
\alias{new_cycle_bg}
\alias{cycle_process}
\alias{recycle}
\alias{uncycle}
\alias{cycles}
\title{Set a hooks on garbage collection}
\usage{
new_cycle(hook, ..., delta = 1, trigger = NULL)

new_cycle_bg(hook, ..., delta = 1, trigger = NULL)

cycle_process(name)

recycle(...)

uncycle()

cycles()
}
\arguments{
\item{hook}{A function to call whenever garbage collection is triggered.
For \code{new_cycle_bg()} The default values of arguments are evaluated when the hook
is called and copied to the newly created session.}

\item{...}{For \code{recycle()}: hooks to be added or replaced, defined with \code{new_cycle()} or
\code{new_cycle_bg()}. Name them or they'll be names using \code{make.names()}.
Unused in \code{new_cycle()} and \code{new_cycle_bg()}.}

\item{delta}{Minimal number of seconds between calls to the hook.}

\item{trigger}{A function returning a value to compare with the previous one.
the hook is called only if the output of trigger has changed.}

\item{name}{name of the cycle to return the process from}
}
\value{
Returns \code{cycles()} invisibly, called for side effects.
}
\description{
\code{recycle()} sets the hooks using \code{new_cycle()} and \code{new_cycle_bg()}. \code{cycles()}
displays the existing hooks. \code{uncycle()} cleans everything up.
\code{cycle_process()} returns an actual process object for advanced use.
}
\details{
\itemize{
\item \code{new_cycle()} defines a hook on garbage collection
\item \code{new_cycle_bg()} is similar but the hook will be run in the background,
in a different session. The output is redirected to the current session,
so if necessary, divert, capture or suppress it in \code{f}
\item \code{recycle()} activates the hooks, if calls several times it will overwrite,
add, or remove hooks. Hooks are run in order when deltas match.
\item \code{cycle_process()} returns a process, of class "<r_process/process/R6>"
documented in the 'processx' package
}
}
\section{environments and run-time data}{


\code{hook} and \code{trigger} must be in the same environment, and this environment
will be altered.

2 new environments are to consider:
\itemize{
\item \code{args_env} : an environment for arguments evaluated at run time from the global environment.
\item \code{mask} : an environment to store and fetch data, that can be used from \code{hook}
and \code{trigger} using the \code{mask$my_variable} and \code{mask$my_variable <- my_value}
}

The alteration depends on which function is called and if the original environment
is \code{.GlobalEnv} :
\itemize{
\item for \code{new_cycle()}, if its enclosure is \code{.GlobalEnv} we will change it to be:
\verb{args_env => data mask => .BaseNamespaceEnv => .GlobalEnv => ...} .
This is done so we have access to global objects but yet can't override
base objects.
\item for \code{new_cycle()} in other cases, presuming its defined in a namespace,
we will change it to be:
\verb{args_env => data mask => ns => ...}
\item for \code{new_cycle_bg()}
\code{.GlobalEnv} we will change it to be:
\verb{args_env => data mask => .BaseNamespaceEnv => .GlobalEnv => ...}.
Note that \code{.GlobalEnv} will be empty in this situation since we start from
a clean session.
}
}

